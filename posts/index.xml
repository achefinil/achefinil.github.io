<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 노트 &amp; 생활</title>
        <link>/posts/</link>
        <description>Recent content in Posts on 노트 &amp; 생활</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Thu, 08 Jun 2017 09:40:42 +0800</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Shadowsocks</title>
            <link>/posts/2017/06/shadowsocks/</link>
            <pubDate>Thu, 08 Jun 2017 09:40:42 +0800</pubDate>
            
            <guid>/posts/2017/06/shadowsocks/</guid>
            <description>注：适用于Debian / Ubuntu系统，其他系统未进行测试。
安装 安装python-pip
apt-get install python-pip 如果出现以下问题，执行升级。 pip install --upgrade pip pip install shadowsocks ##安装shadowsocks 如果出现以下问题，先安装 setuptppls 再执行上面的命令安装ss。
pip install setuptools 配置 创建json配置文件：/etc/shadowsocks.json. Example:
{ &amp;quot;server&amp;quot;:&amp;quot;my_server_ip&amp;quot;, &amp;quot;server_port&amp;quot;:8388, &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;:1080, &amp;quot;password&amp;quot;:&amp;quot;mypassword&amp;quot;, &amp;quot;timeout&amp;quot;:300, &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;, &amp;quot;fast_open&amp;quot;: false } 启动与停止 To run in the background:
ssserver -c /etc/shadowsocks.json -d start ssserver -c /etc/shadowsocks.json -d stop </description>
            <content type="html"><![CDATA[<p><em>注：适用于Debian / Ubuntu系统，其他系统未进行测试。</em></p>
<h2 id="安装">安装</h2>
<p>安装python-pip</p>
<pre><code>apt-get install python-pip
</code></pre><p>如果出现以下问题，执行升级。
<img src="/images/ss1.png" alt="ss1"></p>
<pre><code>pip install --upgrade pip
pip install shadowsocks ##安装shadowsocks
</code></pre><p>如果出现以下问题，先安装 setuptppls 再执行上面的命令安装ss。</p>
<p><img src="/images/ss2.png" alt="ss2"></p>
<pre><code>pip install setuptools
</code></pre><h2 id="配置">配置</h2>
<p>创建json配置文件：/etc/shadowsocks.json. Example:</p>
<pre><code>{
    &quot;server&quot;:&quot;my_server_ip&quot;,
    &quot;server_port&quot;:8388,
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;mypassword&quot;,
    &quot;timeout&quot;:300,
    &quot;method&quot;:&quot;aes-256-cfb&quot;,
    &quot;fast_open&quot;: false
}
</code></pre><h2 id="启动与停止">启动与停止</h2>
<p>To run in the background:</p>
<pre><code>ssserver -c /etc/shadowsocks.json -d start
ssserver -c /etc/shadowsocks.json -d stop
</code></pre>]]></content>
        </item>
        
        <item>
            <title>vim visual block</title>
            <link>/posts/2017/05/vim-visual-block/</link>
            <pubDate>Wed, 31 May 2017 09:40:42 +0800</pubDate>
            
            <guid>/posts/2017/05/vim-visual-block/</guid>
            <description>用注释举例
多行注释：  进入命令行模式，按ctrl + v进入 visual block模式，然后按j, 或者k选中多行，把需要注释的行标记起来 按大写字母I，再插入注释符，例如// 按esc键就会全部注释了  取消多行注释：  进入命令行模式，按ctrl + v进入 visual block模式，按字母l横向选中列的个数，例如 // 需要选中2列 按字母j，或者k选中注释符号 按d键就可全部取消注释  </description>
            <content type="html"><![CDATA[<p>用注释举例</p>
<h2 id="多行注释">多行注释：</h2>
<ul>
<li>进入命令行模式，按ctrl + v进入 visual block模式，然后按j, 或者k选中多行，把需要注释的行标记起来</li>
<li>按大写字母I，再插入注释符，例如//</li>
<li>按esc键就会全部注释了</li>
</ul>
<h2 id="取消多行注释">取消多行注释：</h2>
<ul>
<li>进入命令行模式，按ctrl + v进入 visual block模式，按字母l横向选中列的个数，例如 // 需要选中2列</li>
<li>按字母j，或者k选中注释符号</li>
<li>按d键就可全部取消注释</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>item2 ssh实现自动登录</title>
            <link>/posts/2017/02/item2-ssh%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</link>
            <pubDate>Mon, 06 Feb 2017 09:40:42 +0800</pubDate>
            
            <guid>/posts/2017/02/item2-ssh%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</guid>
            <description>Mac 中可以使用 Iterm2 ssh访问远程机器。可以使用它的Profiles这个功能实现自动登录。
写一个脚本，记录相关需要信息。（~/.ssh/ache）存放位置自定 #!/usr/bin/expect -f set user &amp;lt;用户名&amp;gt; set host &amp;lt;ip地址&amp;gt; set password &amp;lt;密码&amp;gt; set timeout -1 spawn ssh $user@$host expect &amp;quot;*assword:*&amp;quot; send &amp;quot;$password\r&amp;quot; interact expect eof 配置Profiles 打开iterm2， Preferences - Profiles - （+）新建一个。 填写Name与Command（expect ~/.ssh/ache）刚才写的脚本。
登录 这样就告一段落了。可以使用快捷键（command + o）来选择生效不同的配置。</description>
            <content type="html"><![CDATA[<p>Mac 中可以使用 Iterm2 ssh访问远程机器。可以使用它的Profiles这个功能实现自动登录。</p>
<h2 id="写一个脚本记录相关需要信息sshache存放位置自定">写一个脚本，记录相关需要信息。（~/.ssh/ache）存放位置自定</h2>
<pre><code>#!/usr/bin/expect -f
  set user &lt;用户名&gt;
  set host &lt;ip地址&gt;
  set password &lt;密码&gt;
  set timeout -1
  spawn ssh $user@$host
  expect &quot;*assword:*&quot;
  send &quot;$password\r&quot;
  interact
  expect eof
</code></pre><h2 id="配置profiles">配置Profiles</h2>
<p>打开iterm2， Preferences - Profiles - （+）新建一个。
填写Name与Command（expect ~/.ssh/ache）刚才写的脚本。</p>
<h2 id="登录">登录</h2>
<p>这样就告一段落了。可以使用快捷键（command + o）来选择生效不同的配置。</p>
]]></content>
        </item>
        
        <item>
            <title>Linux中使用mysql</title>
            <link>/posts/2017/01/linux%E4%B8%AD%E4%BD%BF%E7%94%A8mysql/</link>
            <pubDate>Tue, 24 Jan 2017 09:40:42 +0800</pubDate>
            
            <guid>/posts/2017/01/linux%E4%B8%AD%E4%BD%BF%E7%94%A8mysql/</guid>
            <description>新年第一更。在node中连接了mysql，记录一下。
使用yum安装 $ yum install mysql mysql-server mysql-devel -y 查看是否生成了mysqld服务 $ chkconfig --list |grep mysql 设置随机启动 $ chkconfig mysqld on 启动／停止／重启mysqld服务 ##启动：这两种方法都可以，执行一个就可以 $ /etc/init.d/mysqld start $ service mysqld start ##停止：这两种方法都可以，执行一个就可以 $ /etc/init.d/mysqld stop $ service mysqld stop ##重启：这两种方法都可以，执行一个就可以 $ /etc/init.d/mysqld restart $ service mysqld restart 启动后，ps一下，看下进程是否起来 $ ps -ef |grep mysql|grep -v grep 查看都有哪些库 $ cd /var/lib/mysql $ ls -l 设置初始密码\权限 ##设置新的密码并同时授权限 $ mysql&amp;gt; grant all on *.* to root@&#39;%&#39; identified by &#39;youpassword&#39;; ##刷新使之生效 $ mysql&amp;gt; flush privileges; ##退出 $ mysql&amp;gt; exit; 登录mysql $ mysql -u root -p </description>
            <content type="html"><![CDATA[<p><strong>新年第一更。在node中连接了mysql，记录一下。</strong></p>
<h2 id="使用yum安装">使用yum安装</h2>
<pre><code>$ yum install mysql mysql-server mysql-devel -y
</code></pre><h2 id="查看是否生成了mysqld服务">查看是否生成了mysqld服务</h2>
<pre><code>$ chkconfig --list |grep mysql
</code></pre><h2 id="设置随机启动">设置随机启动</h2>
<pre><code>$ chkconfig mysqld on
</code></pre><h2 id="启动停止重启mysqld服务">启动／停止／重启mysqld服务</h2>
<pre><code>##启动：这两种方法都可以，执行一个就可以
$ /etc/init.d/mysqld start    
$ service mysqld start 
##停止：这两种方法都可以，执行一个就可以
$ /etc/init.d/mysqld stop   
$ service mysqld stop
##重启：这两种方法都可以，执行一个就可以
$ /etc/init.d/mysqld restart   
$ service mysqld restart
</code></pre><h2 id="启动后ps一下看下进程是否起来">启动后，ps一下，看下进程是否起来</h2>
<pre><code>$ ps -ef |grep mysql|grep -v grep
</code></pre><h2 id="查看都有哪些库">查看都有哪些库</h2>
<pre><code>$ cd /var/lib/mysql 
$ ls -l
</code></pre><h2 id="设置初始密码权限">设置初始密码\权限</h2>
<pre><code>##设置新的密码并同时授权限
$ mysql&gt; grant all on *.* to root@'%' identified by 'youpassword';
##刷新使之生效
$ mysql&gt; flush privileges;
##退出 
$ mysql&gt; exit;
</code></pre><h2 id="登录mysql">登录mysql</h2>
<pre><code>$ mysql -u root -p
</code></pre>]]></content>
        </item>
        
        <item>
            <title>node.js 版本控制 - n</title>
            <link>/posts/2016/12/node.js-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-n/</link>
            <pubDate>Wed, 14 Dec 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/12/node.js-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-n/</guid>
            <description>PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。
当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载。
主要特性  内建负载均衡（使用 Node cluster 集群模块） 后台运行 0 秒停机重载，我理解大概意思是维护升级的时候不需要停机. 具有 Ubuntu 和 CentOS 的启动脚本 停止不稳定的进程（避免无限循环） 控制台检测 提供 HTTP API 远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )  安装 npm install -g pm2 使用 $ npm install pm2 -g # 命令行安装 pm2 $ pm2 start app.js -i 4 # 后台运行pm2，启动4个app.js $ pm2 start app.js --name my-api # 命名进程 $ pm2 list # 显示所有进程状态 $ pm2 monit # 监视所有进程 $ pm2 logs # 显示所有进程日志 $ pm2 stop all # 停止所有进程 $ pm2 restart all # 重启所有进程 $ pm2 reload all # 0 秒停机重载进程 (用于 NETWORKED 进程) $ pm2 stop 0 # 停止指定的进程 $ pm2 restart 0 # 重启指定的进程 $ pm2 startup # 产生 init 脚本 保持进程活着 $ pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615) $ pm2 delete 0 # 杀死指定的进程 $ pm2 delete all # 杀死全部进程 </description>
            <content type="html"><![CDATA[<p><strong>PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。</strong><br>
当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载。</p>
<h2 id="主要特性">主要特性</h2>
<ul>
<li>内建负载均衡（使用 Node cluster 集群模块）</li>
<li>后台运行</li>
<li>0 秒停机重载，我理解大概意思是维护升级的时候不需要停机.</li>
<li>具有 Ubuntu 和 CentOS 的启动脚本</li>
<li>停止不稳定的进程（避免无限循环）</li>
<li>控制台检测</li>
<li>提供 HTTP API</li>
<li>远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )</li>
</ul>
<h2 id="安装">安装</h2>
<pre><code>npm install -g pm2
</code></pre><h2 id="使用">使用</h2>
<pre><code>$ npm install pm2 -g     # 命令行安装 pm2
$ pm2 start app.js -i 4  # 后台运行pm2，启动4个app.js
$ pm2 start app.js --name my-api # 命名进程
$ pm2 list               # 显示所有进程状态
$ pm2 monit              # 监视所有进程
$ pm2 logs               # 显示所有进程日志
$ pm2 stop all           # 停止所有进程
$ pm2 restart all        # 重启所有进程
$ pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)
$ pm2 stop 0             # 停止指定的进程
$ pm2 restart 0          # 重启指定的进程
$ pm2 startup            # 产生 init 脚本 保持进程活着
$ pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)
$ pm2 delete 0           # 杀死指定的进程
$ pm2 delete all         # 杀死全部进程
</code></pre>]]></content>
        </item>
        
        <item>
            <title>PM2</title>
            <link>/posts/2016/12/pm2/</link>
            <pubDate>Wed, 14 Dec 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/12/pm2/</guid>
            <description>PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。
当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载。
主要特性  内建负载均衡（使用 Node cluster 集群模块） 后台运行 0 秒停机重载，我理解大概意思是维护升级的时候不需要停机. 具有 Ubuntu 和 CentOS 的启动脚本 停止不稳定的进程（避免无限循环） 控制台检测 提供 HTTP API 远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )  安装 npm install -g pm2 使用 $ npm install pm2 -g # 命令行安装 pm2 $ pm2 start app.js -i 4 # 后台运行pm2，启动4个app.js $ pm2 start app.js --name my-api # 命名进程 $ pm2 list # 显示所有进程状态 $ pm2 monit # 监视所有进程 $ pm2 logs # 显示所有进程日志 $ pm2 stop all # 停止所有进程 $ pm2 restart all # 重启所有进程 $ pm2 reload all # 0 秒停机重载进程 (用于 NETWORKED 进程) $ pm2 stop 0 # 停止指定的进程 $ pm2 restart 0 # 重启指定的进程 $ pm2 startup # 产生 init 脚本 保持进程活着 $ pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615) $ pm2 delete 0 # 杀死指定的进程 $ pm2 delete all # 杀死全部进程 </description>
            <content type="html"><![CDATA[<p><strong>PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。</strong><br>
当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载。</p>
<h2 id="主要特性">主要特性</h2>
<ul>
<li>内建负载均衡（使用 Node cluster 集群模块）</li>
<li>后台运行</li>
<li>0 秒停机重载，我理解大概意思是维护升级的时候不需要停机.</li>
<li>具有 Ubuntu 和 CentOS 的启动脚本</li>
<li>停止不稳定的进程（避免无限循环）</li>
<li>控制台检测</li>
<li>提供 HTTP API</li>
<li>远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )</li>
</ul>
<h2 id="安装">安装</h2>
<pre><code>npm install -g pm2
</code></pre><h2 id="使用">使用</h2>
<pre><code>$ npm install pm2 -g     # 命令行安装 pm2
$ pm2 start app.js -i 4  # 后台运行pm2，启动4个app.js
$ pm2 start app.js --name my-api # 命名进程
$ pm2 list               # 显示所有进程状态
$ pm2 monit              # 监视所有进程
$ pm2 logs               # 显示所有进程日志
$ pm2 stop all           # 停止所有进程
$ pm2 restart all        # 重启所有进程
$ pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)
$ pm2 stop 0             # 停止指定的进程
$ pm2 restart 0          # 重启指定的进程
$ pm2 startup            # 产生 init 脚本 保持进程活着
$ pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)
$ pm2 delete 0           # 杀死指定的进程
$ pm2 delete all         # 杀死全部进程
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Mac 解决端口占用</title>
            <link>/posts/2016/11/mac-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</link>
            <pubDate>Thu, 17 Nov 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/11/mac-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</guid>
            <description>Tomcat启动时报以下错误 java.rmi.server.ExportException: Port already in use: 1099; nested exception is: java.net.BindException: Address already in use 查看占用该端口的进程 lsof -i tcp:1099 显示如下列表 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME java 1376 achefinil 20u IPv6 0xbf8ce0cb4c234839 0t0 TCP 直接kill掉 kill -9 1099 </description>
            <content type="html"><![CDATA[<h2 id="tomcat启动时报以下错误">Tomcat启动时报以下错误</h2>
<pre><code>java.rmi.server.ExportException: Port already in use: 1099; nested exception is: 
java.net.BindException: Address already in use
</code></pre><h2 id="查看占用该端口的进程">查看占用该端口的进程</h2>
<pre><code>lsof -i tcp:1099
</code></pre><h2 id="显示如下列表">显示如下列表</h2>
<pre><code>COMMAND  PID      USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
 java    1376 achefinil   20u  IPv6 0xbf8ce0cb4c234839      0t0  TCP
</code></pre><h2 id="直接kill掉">直接kill掉</h2>
<pre><code>kill -9 1099
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Mac nginx 相关命令</title>
            <link>/posts/2016/11/mac-nginx-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</link>
            <pubDate>Tue, 15 Nov 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/11/mac-nginx-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</guid>
            <description>各个系统下的nginx的相关命令类似，就OS下使用。（注意如果权限不足需要在下述命令前输入 “sudo”）。
停止操作（两个步骤）  查询nginx主进程号  ps -ef | grep nginx  停止命令（3种，酌情使用）  ## 从容停止 kill -QUIT 主进程号 ## 快速停止 kill -TERM 主进程号 ## 强制停止 kill -9 主进程号 平滑重启  如果更改了配置，并不需要总是关闭再打开。同样要先拿到主进程号，同上第一步骤。  ## 后面是主进称号或进程号文件路径 kill -HUP 主进程号  另外推荐的重载配置的方式  /usr/local/nginx/sbin/nginx -s reload  如果修改了配置文件后最好先检查一下修改过的配置文件是否正确  nginx -t -c config文件路径 </description>
            <content type="html"><![CDATA[<p>各个系统下的nginx的相关命令类似，就OS下使用。（注意如果权限不足需要在下述命令前输入 “sudo”）。</p>
<h2 id="停止操作两个步骤">停止操作（两个步骤）</h2>
<ul>
<li>查询nginx主进程号</li>
</ul>
<pre><code>ps -ef | grep nginx
</code></pre><ul>
<li>停止命令（3种，酌情使用）</li>
</ul>
<pre><code>## 从容停止
kill -QUIT 主进程号
## 快速停止
kill -TERM 主进程号
## 强制停止
kill -9 主进程号
</code></pre><h2 id="平滑重启">平滑重启</h2>
<ul>
<li>如果更改了配置，并不需要总是关闭再打开。同样要先拿到主进程号，同上第一步骤。</li>
</ul>
<pre><code>## 后面是主进称号或进程号文件路径
kill -HUP 主进程号
</code></pre><ul>
<li>另外推荐的重载配置的方式</li>
</ul>
<pre><code>/usr/local/nginx/sbin/nginx -s reload
</code></pre><ul>
<li>如果修改了配置文件后最好先检查一下修改过的配置文件是否正确</li>
</ul>
<pre><code>nginx -t -c config文件路径
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Git无密码操作 添加SSHKey</title>
            <link>/posts/2016/11/git%E6%97%A0%E5%AF%86%E7%A0%81%E6%93%8D%E4%BD%9C-%E6%B7%BB%E5%8A%A0sshkey/</link>
            <pubDate>Thu, 10 Nov 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/11/git%E6%97%A0%E5%AF%86%E7%A0%81%E6%93%8D%E4%BD%9C-%E6%B7%BB%E5%8A%A0sshkey/</guid>
            <description>Git仓库之间的代码传输协议主要使用ssh协议。而一般搭建Gitlab的时候使用的git用户是没有密码的，因此直接ssh是不能登录的，就需要使用ssh-keygen上传公钥，使用非对称加密传输。下面讲述如何上传你的ssh公钥：
 &amp;ndash; 在Terminal / git Bash中敲下面的命令：
## 生成密钥，一路回车即可（如果需要重新生成注意一下） ssh-keygen -t rsa ## 显示刚才生成的公钥内容，自行拷贝到Gitlab cat ~/.ssh/id_rsa.pub 最后粘贴到账户的ssh配置处。</description>
            <content type="html"><![CDATA[<blockquote>
<p>Git仓库之间的代码传输协议主要使用ssh协议。而一般搭建Gitlab的时候使用的git用户是没有密码的，因此直接ssh是不能登录的，就需要使用ssh-keygen上传公钥，使用非对称加密传输。下面讲述如何上传你的ssh公钥：</p>
</blockquote>
<p>&ndash; 在Terminal / git Bash中敲下面的命令：</p>
<pre><code>## 生成密钥，一路回车即可（如果需要重新生成注意一下）
ssh-keygen -t rsa 
## 显示刚才生成的公钥内容，自行拷贝到Gitlab
cat ~/.ssh/id_rsa.pub
</code></pre><p>最后粘贴到账户的ssh配置处。</p>
]]></content>
        </item>
        
        <item>
            <title>Mac Finder 显示隐藏文件和文件夹</title>
            <link>/posts/2016/09/mac-finder-%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
            <pubDate>Tue, 27 Sep 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/09/mac-finder-%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
            <description>最近Mac上使用一些命令 总有一些记不住的 记录一下 以下命令 需在「终端 Terminal」中执行
 显示隐藏文件
 defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder  隐藏文件
 defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder 注：以上命令适用于 OS X Mavericks 和 OS X Yosemite 系统</description>
            <content type="html"><![CDATA[<p>最近Mac上使用一些命令 总有一些记不住的 记录一下
以下命令 需在「终端 Terminal」中执行</p>
<blockquote>
<p>显示隐藏文件</p>
</blockquote>
<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder
</code></pre><blockquote>
<p>隐藏文件</p>
</blockquote>
<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder
</code></pre><p>注：以上命令适用于 OS X Mavericks 和 OS X Yosemite 系统</p>
]]></content>
        </item>
        
        <item>
            <title>Git Quick Start</title>
            <link>/posts/2016/09/git-quick-start/</link>
            <pubDate>Tue, 13 Sep 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/09/git-quick-start/</guid>
            <description>配置 常用配置：
# 配置全局用户名、邮箱，主要用于 commit 身份信息 $ git config --global user.name &amp;quot;achefinil&amp;quot; $ git config --global user.email &amp;quot;hi@achefinil.com&amp;quot; # 配置缩写，强烈推荐，之后就不必敲那么多字符了 $ git config --global alias.br branch $ git config --global alias.co checkout $ git config --global alias.ci commit 可以通过如下命令确认配置是否生效：
$ git config --list alias.br=branch alias.co=checkout alias.ci=commit $ git config user.name 一些可能有用的配置：
# 配置编辑器，用于编辑 commit 信息 $ git config --global core.editor notepad # 配置忽略文件权限的修改 $ git config --global core.filemode false 克隆仓库 有两种克隆仓库的方式，一种是 HTTP/HTTPS，一种是 SSH，由于 SSH 可以通过公钥来免密码，推荐使用：</description>
            <content type="html"><![CDATA[<h2 id="配置">配置</h2>
<p>常用配置：</p>
<pre><code># 配置全局用户名、邮箱，主要用于 commit 身份信息
$ git config --global user.name &quot;achefinil&quot;
$ git config --global user.email &quot;hi@achefinil.com&quot;
 
# 配置缩写，强烈推荐，之后就不必敲那么多字符了
$ git config --global alias.br branch
$ git config --global alias.co checkout
$ git config --global alias.ci commit
</code></pre><p>可以通过如下命令确认配置是否生效：</p>
<pre><code>$ git config --list
alias.br=branch
alias.co=checkout
alias.ci=commit
$ git config user.name
</code></pre><p>一些可能有用的配置：</p>
<pre><code># 配置编辑器，用于编辑 commit 信息
$ git config --global core.editor notepad
  
# 配置忽略文件权限的修改
$ git config --global core.filemode false

</code></pre><h2 id="克隆仓库">克隆仓库</h2>
<p>有两种克隆仓库的方式，一种是 HTTP/HTTPS，一种是 SSH，由于 SSH 可以通过公钥来免密码，推荐使用：</p>
<pre><code># SSH，推荐使用
$ git clone git@ahcefinil.git
 
# HTTP
$ git clone http://ahcefinil.git
 
# 克隆到指定目录
$ mkdir myproject
$ git clone git@ahcefinil.git myproject
</code></pre><h2 id="更新代码">更新代码</h2>
<p>更新代码的方式很简单：</p>
<pre><code># 拉取远程最新代码并和当前分支合并
$ git pull
 
# 实际上相当于如下两条命令
$ git fetch
$ git merge origin/master

</code></pre><h2 id="修改代码并提交">修改代码并提交</h2>
<p>完成代码的修改后，开始提交代码：</p>
<pre><code># 查看改动的文件
$ git status
 
# 查看改动内容
$ git diff
 
# 将修改代码添加到暂存区（Staged Area），以方便后续提交
$ git add your-file-A your-file-B
 
# 提交
$ git commit -m 'commit comment'
</code></pre><h2 id="推送到远程分支">推送到远程分支</h2>
<p>本地提交代码后，将提交推送到远程分支，方便让其他人获取你的代码，以及进行 Merge Request、Code Review、远程合并等操作：</p>
<pre><code># 将本地 fav-list 分支的提交推送到远程分支 fav-list
# -u 代表 --set-upstream，之后本地 fav-list 分支的提交，可以直接 git push 即自动推送到远程 fav-list 分支
$ git push -u origin fav-list:fav-list
 
# 之后本地的提交推送直接 push 即可
$ git push
</code></pre><h2 id="本地分支合并">本地分支合并</h2>
<p>推荐走远程合并的方式，在 Gitlab 等系统上完成。也可以在本地进行：</p>
<pre><code># 切回 master 分支
$ git checkout master
 
# 合并分支
$ git merge fav-list
 
# 提交到远程 master，更新代码
$ git push
</code></pre><h2 id="删除分支">删除分支</h2>
<p>代码成功合并后，可以删除分支：</p>
<pre><code># 删除本地分支
$ git branch -d fav-list
Deleted branch cartype-list (was 7003eb1).
# 强制删除：在本地修改未提交时，是不可以删除的，如确定删除分支并放弃所有修改，可以输入$ git branch -D fav-list
# 删除远程分支
$ git push origin :fav-list
To git@*****.git
 - [deleted]         fav-list
# 删除后，查看branch，就只剩下master分支了：
$ git branch
* master
</code></pre><h2 id="取消修改-恢复版本">取消修改 恢复版本</h2>
<pre><code># 取消对文件的修改。还原到最近的版本，废弃本地做的修改。
git checkout -- &lt;file&gt;

# 取消已经暂存的文件。即，撤销先前&quot;git add&quot;的操作
git reset HEAD &lt;file&gt;...

# 修改最后一次提交。用于修改上一次的提交信息，或漏提交文件等情况。
git commit --amend

# 回退所有内容到上一个版本
git reset HEAD^

# 回退a.py这个文件的版本到上一个版本  
git reset HEAD^ a.py  

# 向前回退到第3个版本  
git reset –soft HEAD~3  

# 将本地的状态回退到和远程的一样  
git reset –hard origin/master  

# 回退到某个版本  
git reset 057d  

# 回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit.(代码回滚到上个版本，并提交git)
git revert HEAD

</code></pre><h2 id="切换到远程分支">切换到远程分支</h2>
<pre><code># 查看当前所有分支（本地+远程）
git branch -va
# 创建本地分支并切换到远程分支（例：ache为分支名）
git checkout -b ache origin/ache
</code></pre>]]></content>
        </item>
        
        <item>
            <title>js判断当前设备内核与类型</title>
            <link>/posts/2016/01/js%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E8%AE%BE%E5%A4%87%E5%86%85%E6%A0%B8%E4%B8%8E%E7%B1%BB%E5%9E%8B/</link>
            <pubDate>Tue, 05 Jan 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/01/js%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E8%AE%BE%E5%A4%87%E5%86%85%E6%A0%B8%E4%B8%8E%E7%B1%BB%E5%9E%8B/</guid>
            <description>创建对象，使用indexOf判断并返回 //判断访问终端 var browser={ versions:function(){ var u = navigator.userAgent, app = navigator.appVersion; return { trident: u.indexOf(&amp;#39;Trident&amp;#39;) &amp;gt; -1, //IE内核  presto: u.indexOf(&amp;#39;Presto&amp;#39;) &amp;gt; -1, //opera内核  webKit: u.indexOf(&amp;#39;AppleWebKit&amp;#39;) &amp;gt; -1, //苹果、谷歌内核  gecko: u.indexOf(&amp;#39;Gecko&amp;#39;) &amp;gt; -1 &amp;amp;&amp;amp; u.indexOf(&amp;#39;KHTML&amp;#39;) == -1,//火狐内核  mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端  ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端  android: u.indexOf(&amp;#39;Android&amp;#39;) &amp;gt; -1 || u.indexOf(&amp;#39;Linux&amp;#39;) &amp;gt; -1, //android终端或者uc浏览器  iPhone: u.indexOf(&amp;#39;iPhone&amp;#39;) &amp;gt; -1 , //是否为iPhone或者QQHD浏览器  iPad: u.</description>
            <content type="html"><![CDATA[<h2 id="创建对象使用indexof判断并返回">创建对象，使用indexOf判断并返回</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//判断访问终端
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">browser</span><span style="color:#f92672">=</span>{
    <span style="color:#a6e22e">versions</span><span style="color:#f92672">:</span><span style="color:#66d9ef">function</span>(){
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">u</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">userAgent</span>, <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">appVersion</span>;
        <span style="color:#66d9ef">return</span> {
            <span style="color:#a6e22e">trident</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;Trident&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">//IE内核
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">presto</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;Presto&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">//opera内核
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">webKit</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;AppleWebKit&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">//苹果、谷歌内核
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">gecko</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;Gecko&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;KHTML&#39;</span>) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#75715e">//火狐内核
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">mobile</span><span style="color:#f92672">:</span> <span style="color:#f92672">!!</span><span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">match</span>(<span style="color:#e6db74">/AppleWebKit.*Mobile.*/</span>), <span style="color:#75715e">//是否为移动终端
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">ios</span><span style="color:#f92672">:</span> <span style="color:#f92672">!!</span><span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">match</span>(<span style="color:#e6db74">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span style="color:#75715e">//ios终端
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">android</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;Android&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;Linux&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">//android终端或者uc浏览器
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">iPhone</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;iPhone&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> , <span style="color:#75715e">//是否为iPhone或者QQHD浏览器
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">iPad</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;iPad&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">//是否iPad
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">webApp</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;Safari&#39;</span>) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">//是否web应该程序，没有头部与底部
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">weixin</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;MicroMessenger&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">//是否微信 （2015-01-22新增）
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">qq</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">match</span>(<span style="color:#e6db74">/\sQQ/i</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34; qq&#34;</span> <span style="color:#75715e">//是否QQ
</span><span style="color:#75715e"></span>        };
    }(),
    <span style="color:#a6e22e">language</span><span style="color:#f92672">:</span>(<span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">browserLanguage</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">language</span>).<span style="color:#a6e22e">toLowerCase</span>()
</code></pre></div><h2 id="调用">调用</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//判断是否IE内核
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">browser</span>.<span style="color:#a6e22e">versions</span>.<span style="color:#a6e22e">trident</span>){ <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;is IE&#34;</span>); }
<span style="color:#75715e">//判断是否webKit内核
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">browser</span>.<span style="color:#a6e22e">versions</span>.<span style="color:#a6e22e">webKit</span>){ <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;is webKit&#34;</span>); }
<span style="color:#75715e">//判断是否移动端
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">browser</span>.<span style="color:#a6e22e">versions</span>.<span style="color:#a6e22e">mobile</span><span style="color:#f92672">||</span><span style="color:#a6e22e">browser</span>.<span style="color:#a6e22e">versions</span>.<span style="color:#a6e22e">android</span><span style="color:#f92672">||</span><span style="color:#a6e22e">browser</span>.<span style="color:#a6e22e">versions</span>.<span style="color:#a6e22e">ios</span>){ <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;移动端&#34;</span>); }

</code></pre></div><h2 id="正则判断ios与安卓">正则判断ios与安卓</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">if</span> (<span style="color:#e6db74">/(iPhone|iPad|iPod|iOS)/i</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">userAgent</span>)) {
    <span style="color:#75715e">//alert(navigator.userAgent);  
</span><span style="color:#75715e"></span>   <span style="color:#75715e">//苹果端
</span><span style="color:#75715e"></span>} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#e6db74">/(Android)/i</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">userAgent</span>)) {
    <span style="color:#75715e">//alert(navigator.userAgent); 
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//安卓端
</span><span style="color:#75715e"></span>} <span style="color:#66d9ef">else</span> {
   <span style="color:#75715e">//pc端
</span><span style="color:#75715e"></span>};
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>gulp.js 简单配置</title>
            <link>/posts/2016/01/gulp.js-%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</link>
            <pubDate>Mon, 04 Jan 2016 09:40:42 +0800</pubDate>
            
            <guid>/posts/2016/01/gulp.js-%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</guid>
            <description>gulp.js是一个前端开发中对前端代码构建的工具，是自动化的构建利器。 基于node.js gulp官方网址：http://gulpjs.com http://www.gulpjs.com.cn/  安装nodejs  gulp是基于nodejs，理所当然需要安装nodejs； 安装：打开nodejs官网，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后像安装QQ一样安装它就可以了（安装路径随意）。  npm  说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）； 使用npm安装插件：命令提示符执行npm install [-g] [–save-dev]； node插件名称。例：npm install gulp-less –save-dev -g：全局安装。将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量； 非全局安装：将会安装在当前定位目录； 全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用； –save：将保存配置信息至package.json（package.json是nodejs项目配置文件）； dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点； install，则会根据package.json下载所有需要的包）。 使用npm卸载插件：npm uninstall [-g] [–save-dev] PS：不要直接删除本地插件包 使用npm更新插件：npm update [-g] [–save-dev] 查看npm帮助：npm help 当前目录已安装插件：npm list  安装 gulp  #全局安装
$ npm install gulp -g
#切到工作目录初始化项目，并填写相关项目信息。之后会在目录中生成一个package.json的文件。
$ gulp init #在项目目录下安装一遍
$ npm install gulp &amp;ndash;save-dev
 安装 gulp 插件 我们将要使用Gulp插件来完成我们以下任务：
 sass的编译（gulp-ruby-sass） 自动添加css前缀（gulp-autoprefixer） 压缩css（gulp-minify-css） js代码校验（gulp-jshint） 合并js文件（gulp-concat） 压缩js代码（gulp-uglify） 压缩图片（gulp-imagemin） 自动刷新页面（gulp-livereload） 图片缓存，只有图片替换了才压缩（gulp-cache） 更改提醒（gulp-notify） 清除文件（del）  $ npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev gulpfile.</description>
            <content type="html"><![CDATA[<ul>
<li>gulp.js是一个前端开发中对前端代码构建的工具，是自动化的构建利器。</li>
<li>基于node.js</li>
<li>gulp官方网址：http://gulpjs.com <a href="http://www.gulpjs.com.cn/">http://www.gulpjs.com.cn/</a></li>
</ul>
<h2 id="安装nodejs">安装nodejs</h2>
<ol>
<li>gulp是基于nodejs，理所当然需要安装nodejs；</li>
<li>安装：打开nodejs官网，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后像安装QQ一样安装它就可以了（安装路径随意）。</li>
</ol>
<h2 id="npm">npm</h2>
<ol>
<li>说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</li>
<li>使用npm安装插件：命令提示符执行npm install [-g] [–save-dev]；</li>
<li>node插件名称。例：npm install gulp-less –save-dev</li>
<li>-g：全局安装。将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量； 非全局安装：将会安装在当前定位目录； 全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；</li>
<li>–save：将保存配置信息至package.json（package.json是nodejs项目配置文件）；</li>
<li>dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；
install，则会根据package.json下载所有需要的包）。</li>
<li>使用npm卸载插件：npm uninstall [-g] [–save-dev] PS：不要直接删除本地插件包</li>
<li>使用npm更新插件：npm update [-g] [–save-dev]</li>
<li>查看npm帮助：npm help</li>
<li>当前目录已安装插件：npm list</li>
</ol>
<h2 id="安装-gulp">安装 gulp</h2>
<blockquote>
<p>#全局安装<br>
$ npm install gulp -g<br>
#切到工作目录初始化项目，并填写相关项目信息。之后会在目录中生成一个package.json的文件。<br>
$ gulp init
#在项目目录下安装一遍<br>
$ npm install gulp &ndash;save-dev</p>
</blockquote>
<h2 id="安装-gulp-插件">安装 gulp 插件</h2>
<p>我们将要使用Gulp插件来完成我们以下任务：</p>
<ul>
<li>sass的编译（gulp-ruby-sass）</li>
<li>自动添加css前缀（gulp-autoprefixer）</li>
<li>压缩css（gulp-minify-css）</li>
<li>js代码校验（gulp-jshint）</li>
<li>合并js文件（gulp-concat）</li>
<li>压缩js代码（gulp-uglify）</li>
<li>压缩图片（gulp-imagemin）</li>
<li>自动刷新页面（gulp-livereload）</li>
<li>图片缓存，只有图片替换了才压缩（gulp-cache）</li>
<li>更改提醒（gulp-notify）</li>
<li>清除文件（del）</li>
</ul>
<pre><code>$ npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev
</code></pre><h2 id="gulpfilejs">gulpfile.js</h2>
<blockquote>
<p>在gulpfile.js文件中开始写码，是不是很熟悉了</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">gulp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp&#39;</span>),
<span style="color:#a6e22e">sass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-ruby-sass&#39;</span>),
<span style="color:#a6e22e">autoprefixer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-autoprefixer&#39;</span>),
<span style="color:#a6e22e">minifycss</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-minify-css&#39;</span>),
<span style="color:#a6e22e">jshint</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-jshint&#39;</span>),
<span style="color:#a6e22e">uglify</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-uglify&#39;</span>),
<span style="color:#a6e22e">imagemin</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-imagemin&#39;</span>),
<span style="color:#a6e22e">rename</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-rename&#39;</span>),
<span style="color:#a6e22e">concat</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-concat&#39;</span>),
<span style="color:#a6e22e">notify</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-notify&#39;</span>),
<span style="color:#a6e22e">cache</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-cache&#39;</span>),
<span style="color:#a6e22e">livereload</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-livereload&#39;</span>),
<span style="color:#a6e22e">del</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;del&#39;</span>);
<span style="color:#a6e22e">obfuscate</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-obfuscate&#39;</span>); 

<span style="color:#75715e">//css
</span><span style="color:#75715e"></span><span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;styles&#39;</span>, <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">src</span>(<span style="color:#e6db74">&#39;src/main/webapp/res/css/*.css&#39;</span>)
.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">rename</span>({ <span style="color:#a6e22e">suffix</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;.min&#39;</span> }))
.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">minifycss</span>())
.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">dest</span>(<span style="color:#e6db74">&#39;src/main/webapp/res/css/min&#39;</span>))
.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">notify</span>({ <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Styles task complete&#39;</span> }));
});

<span style="color:#75715e">// Scripts
</span><span style="color:#75715e"></span><span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;scripts&#39;</span>, <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">src</span>(<span style="color:#e6db74">&#39;src/main/webapp/res/js/*.js&#39;</span>)
.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">rename</span>({ <span style="color:#a6e22e">suffix</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;.min&#39;</span> }))
<span style="color:#75715e">// .pipe(obfuscate())
</span><span style="color:#75715e"></span>.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">uglify</span>())
.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">dest</span>(<span style="color:#e6db74">&#39;src/main/webapp/res/js/min&#39;</span>))
.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">notify</span>({ <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Scripts task complete&#39;</span> }));
});

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;help&#39;</span>,<span style="color:#66d9ef">function</span> () {
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;   gulp ache   执行&#39;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;   gulp help   gulp参数说明&#39;</span>);
});

<span style="color:#75715e">// Clean
</span><span style="color:#75715e"></span><span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;clean&#39;</span>, <span style="color:#66d9ef">function</span>() {
<span style="color:#a6e22e">del</span>([<span style="color:#e6db74">&#39;src/main/webapp/res/css/min/*.css&#39;</span>,
 <span style="color:#e6db74">&#39;src/main/webapp/res/js/min/*.js&#39;</span>])
});

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;ache&#39;</span>,[<span style="color:#e6db74">&#39;clean&#39;</span>],<span style="color:#66d9ef">function</span> () {
<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">start</span>(<span style="color:#e6db74">&#39;styles&#39;</span>, <span style="color:#e6db74">&#39;scripts&#39;</span>);
});

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;default&#39;</span>, <span style="color:#66d9ef">function</span>() {
<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">start</span>(<span style="color:#e6db74">&#39;help&#39;</span>);
});
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>If You</title>
            <link>/posts/2015/10/if-you/</link>
            <pubDate>Thu, 29 Oct 2015 09:40:42 +0800</pubDate>
            
            <guid>/posts/2015/10/if-you/</guid>
            <description>歌词有些负面 听起来还是很享受的 BIGBANG 那个可能有版权控制 暂时不能听到 推荐在购买听 可以先听听韩国国民妹妹翻唱版本
그녀가 떠나가요 她离开了 나는 아무것도 할 수 없어요 我什么也做不了 사랑이 떠나가요 爱情离开了 나는 바보처럼 멍하니 서 있네요 我还像傻瓜一样地站着 멀어지는 그 뒷모습만을 바라보다 望着渐行渐远的那个背影 작은 점이 되어 사라진다 化成小小的一个点 消失不见 시간이 지나면 또 무뎌질까 随着时间流逝 是否会逐渐麻木 옛 생각이 나 想起往事 니 생각이 나 想起了你 IF YOU IF YOU 아직 너무 늦지 않았다면 如果还没有太迟 우리 다시 돌아갈 수는 없을까 我们是否能重新回去 IF YOU IF YOU 너도 나와 같이 힘들다면 如果你也和我一样难过 우리 조금 쉽게 갈 수는 없을까 我们能不能走的轻松一点 있을 때 잘할 걸 그랬어 在一起时 本来应该好好对你 그대는 어떤가요 你怎么样呢 정말 아무렇지 않은 건가요 真的无所谓吗 이별이 지나봐요 试着经历离别 그댈 잊어야 하지만 쉽지가 않네요 必须要忘记你 但是并不容易 멀어지는 그 뒷모습만을 바라보다 望着渐行渐远的那个背影 작은 점이 되어 사라진다 化成小小的一个点 消失不见 누군갈 만나면 위로가 될까 如果和谁见面 是否能得到安慰 옛 생각이 나 想起往事 니 생각이 나 想起了你 IF YOU IF YOU 아직 너무 늦지 않았다면 如果还没有太迟 우리 다시 돌아갈 수는 없을까 我们是否能重新回去 IF YOU IF YOU 너도 나와 같이 힘들다면 如果你也和我一样难过 우리 조금 쉽게 갈 수는 없을까 我们能不能走的轻松一点 있을 때 잘할 걸 그랬어 在一起时 本来应该好好对你 오늘같이 가녀린 비가 내리는 날이면 像今天这种蒙蒙细雨的日子 너의 그림자가 떠오르고 就会浮想起你的影子 서랍 속에 몰래 넣어둔 把悄悄放在抽屉里的 우리의 추억을 我们的回忆 다시 꺼내 홀로 회상하고 重新取出来 独自回想 헤어짐이란 슬픔의 무게를 分手的悲伤的重量 난 왜 몰랐을까 当时我为什么不懂呢 IF YOU IF YOU IF YOU IF YOU 아직 너무 늦지 않았다면 如果还没有太迟 우리 다시 돌아갈 수는 없을까 我们是否能重新回去 IF YOU IF YOU IF YOU IF YOU 너도 나와 같이 힘들다면 如果你也和我一样难过 우리 조금 쉽게 갈 수는 없을까 我们能不能走的轻松一点 있을 때 잘할 걸 그랬어 在一起时 本来应该好好对你 </description>
            <content type="html"><![CDATA[<p>歌词有些负面 听起来还是很享受的
BIGBANG 那个可能有版权控制 暂时不能听到
推荐在购买听 可以先听听韩国国民妹妹翻唱版本</p>
<pre><code>그녀가 떠나가요
她离开了
나는 아무것도 할 수 없어요
我什么也做不了
사랑이 떠나가요
爱情离开了
나는 바보처럼 멍하니 서 있네요
我还像傻瓜一样地站着
멀어지는 그 뒷모습만을 바라보다
望着渐行渐远的那个背影
작은 점이 되어 사라진다
化成小小的一个点 消失不见
시간이 지나면 또 무뎌질까
随着时间流逝 是否会逐渐麻木
옛 생각이 나
想起往事
니 생각이 나
想起了你
IF YOU
IF YOU
아직 너무 늦지 않았다면
如果还没有太迟
우리 다시 돌아갈 수는 없을까
我们是否能重新回去
IF YOU
IF YOU
너도 나와 같이 힘들다면
如果你也和我一样难过
우리 조금 쉽게 갈 수는 없을까
我们能不能走的轻松一点
있을 때 잘할 걸 그랬어
在一起时 本来应该好好对你
그대는 어떤가요
你怎么样呢
정말 아무렇지 않은 건가요
真的无所谓吗
이별이 지나봐요
试着经历离别
그댈 잊어야 하지만 쉽지가 않네요
必须要忘记你 但是并不容易
멀어지는 그 뒷모습만을 바라보다
望着渐行渐远的那个背影
작은 점이 되어 사라진다
化成小小的一个点 消失不见
누군갈 만나면 위로가 될까
如果和谁见面 是否能得到安慰
옛 생각이 나
想起往事
니 생각이 나
想起了你
IF YOU
IF YOU
아직 너무 늦지 않았다면
如果还没有太迟
우리 다시 돌아갈 수는 없을까
我们是否能重新回去
IF YOU
IF YOU
너도 나와 같이 힘들다면
如果你也和我一样难过
우리 조금 쉽게 갈 수는 없을까
我们能不能走的轻松一点
있을 때 잘할 걸 그랬어
在一起时 本来应该好好对你
오늘같이 가녀린 비가 내리는 날이면
像今天这种蒙蒙细雨的日子
너의 그림자가 떠오르고
就会浮想起你的影子
서랍 속에 몰래 넣어둔
把悄悄放在抽屉里的
우리의 추억을
我们的回忆
다시 꺼내 홀로 회상하고
重新取出来 独自回想
헤어짐이란 슬픔의 무게를
分手的悲伤的重量
난 왜 몰랐을까
当时我为什么不懂呢
IF YOU
IF YOU
IF YOU
IF YOU
아직 너무 늦지 않았다면
如果还没有太迟
우리 다시 돌아갈 수는 없을까
我们是否能重新回去
IF YOU
IF YOU
IF YOU
IF YOU
너도 나와 같이 힘들다면
如果你也和我一样难过
우리 조금 쉽게 갈 수는 없을까
我们能不能走的轻松一点
있을 때 잘할 걸 그랬어
在一起时 本来应该好好对你
</code></pre>]]></content>
        </item>
        
        <item>
            <title>js-Ajax</title>
            <link>/posts/2015/10/js-ajax/</link>
            <pubDate>Mon, 26 Oct 2015 09:40:42 +0800</pubDate>
            
            <guid>/posts/2015/10/js-ajax/</guid>
            <description>最近为了减少页面加载文件大小，省去了jQuery包。直接使用原生js码了Ajax。
 /** * @函数说明 Ajax封装 * @修改历史 * 2015-09-18 Achefinil 重写ajax */ function AjaxClass(){ var XmlHttp = false; try { XmlHttp = new XMLHttpRequest();//FireFox专有 } catch(e) { try { XmlHttp = new ActiveXObject(&amp;quot;MSXML2.XMLHTTP&amp;quot;); } catch(e2) { try { XmlHttp = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;); } catch(e3) { showMsg(&amp;quot;请使用现代浏览器&amp;quot;); XmlHttp = false; } } } var me = this; this.Method = &amp;quot;POST&amp;quot;; this.Url = &amp;quot;&amp;quot;; this.Async = true; this.param = &amp;quot;&amp;quot;; this.</description>
            <content type="html"><![CDATA[<blockquote>
<p>最近为了减少页面加载文件大小，省去了jQuery包。直接使用原生js码了Ajax。</p>
</blockquote>
<pre><code>/**
 * @函数说明 Ajax封装
 * @修改历史
 *      2015-09-18  Achefinil   重写ajax
 */
function AjaxClass(){
    var XmlHttp = false;
    try  {
        XmlHttp = new XMLHttpRequest();//FireFox专有
    } catch(e) {
        try {
            XmlHttp = new ActiveXObject(&quot;MSXML2.XMLHTTP&quot;);
        } catch(e2) {
            try {
                XmlHttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
            } catch(e3) {
                showMsg(&quot;请使用现代浏览器&quot;);
                XmlHttp = false;
            }
        }
     }
    var me = this;
    this.Method = &quot;POST&quot;;
    this.Url = &quot;&quot;;
    this.Async = true;
    this.param = &quot;&quot;;
    this.CallBack = function(){};
    this.Loading = function(){};
    this.Send = function(){
        if (this.Url==&quot;&quot;){
            return false;
        }
        if (!XmlHttp){
            return IframePost();
        }
        XmlHttp.open (this.Method, this.Url, this.Async);
        if (this.Method==&quot;POST&quot;){
            XmlHttp.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);
        }
        XmlHttp.onreadystatechange = function(){
            if (XmlHttp.readyState == 4){
                var Result = false;
                if (XmlHttp.status == 200){
                    Result = XmlHttp.responseText;
                }else{
                    if(XmlHttp.status == 0){
                        showMsg(&quot;网络异常，请检查您的网络&quot;);
                    }else{
                        showMsg(&quot;登陆失败，请稍后重试&quot;);
                    }
                    return;
                }
                XmlHttp = null;
                me.CallBack(Result);
            }else{
                me.Loading();
            }
        };

        if (this.Method==&quot;POST&quot;){
            XmlHttp.send(this.param);
        } else {
            XmlHttp.send(null);
        }
    };

    //Iframe方式提交
    function IframePost(){
        var Num = 0;
        var obj = document.createElement(&quot;iframe&quot;);
        obj.attachEvent(&quot;onload&quot;,function(){
            me.CallBack(obj.contentWindow.document.body.innerHTML);
            obj.removeNode();
        });
        obj.attachEvent(&quot;onreadystatechange&quot;,function(){ if (Num&gt;=5) {showMsg(false);obj.removeNode();} });
        obj.src = me.Url;
        obj.style.display = 'none';
        document.body.appendChild(obj);
    }
}
</code></pre><blockquote>
<p>调用方法</p>
</blockquote>
<pre><code>//调用ajax
var Ajax = new AjaxClass();// 创建AJAX对象
Ajax.Method = &quot;POST&quot;;// 设置请求方式为POST
Ajax.Url = // URL
Ajax.Async = true;// 是否异步
Ajax.param = // 参数
Ajax.Loading = function(){  //等待函数
    //  document.write(&quot;loading...&quot;);
};

Ajax.CallBack = function(response) {
    // 回调函数 ...
};
Ajax.Send();
</code></pre>]]></content>
        </item>
        
        <item>
            <title>20150924</title>
            <link>/posts/2015/09/20150924/</link>
            <pubDate>Thu, 24 Sep 2015 09:40:42 +0800</pubDate>
            
            <guid>/posts/2015/09/20150924/</guid>
            <description>&lt;p&gt;折腾了许久
最后还是决定开个博客记录下成长&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>折腾了许久
最后还是决定开个博客记录下成长</p>
<blockquote>
<p>Panic lead to perish — Havoc Bless#</p>
</blockquote>]]></content>
        </item>
        
    </channel>
</rss>
